/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.dorif.handler;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-03")
public class GlobalTermInfo implements org.apache.thrift.TBase<GlobalTermInfo, GlobalTermInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GlobalTermInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GlobalTermInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IDF_FIELD_DESC = new org.apache.thrift.protocol.TField("idf", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GlobalTermInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GlobalTermInfoTupleSchemeFactory();

  public long id; // required
  public java.lang.String term; // required
  public long frequency; // required
  public double idf; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TERM((short)2, "term"),
    FREQUENCY((short)3, "frequency"),
    IDF((short)4, "idf");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TERM
          return TERM;
        case 3: // FREQUENCY
          return FREQUENCY;
        case 4: // IDF
          return IDF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __FREQUENCY_ISSET_ID = 1;
  private static final int __IDF_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDF, new org.apache.thrift.meta_data.FieldMetaData("idf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GlobalTermInfo.class, metaDataMap);
  }

  public GlobalTermInfo() {
  }

  public GlobalTermInfo(
    long id,
    java.lang.String term,
    long frequency,
    double idf)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.term = term;
    this.frequency = frequency;
    setFrequencyIsSet(true);
    this.idf = idf;
    setIdfIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GlobalTermInfo(GlobalTermInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTerm()) {
      this.term = other.term;
    }
    this.frequency = other.frequency;
    this.idf = other.idf;
  }

  public GlobalTermInfo deepCopy() {
    return new GlobalTermInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.term = null;
    setFrequencyIsSet(false);
    this.frequency = 0;
    setIdfIsSet(false);
    this.idf = 0.0;
  }

  public long getId() {
    return this.id;
  }

  public GlobalTermInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getTerm() {
    return this.term;
  }

  public GlobalTermInfo setTerm(java.lang.String term) {
    this.term = term;
    return this;
  }

  public void unsetTerm() {
    this.term = null;
  }

  /** Returns true if field term is set (has been assigned a value) and false otherwise */
  public boolean isSetTerm() {
    return this.term != null;
  }

  public void setTermIsSet(boolean value) {
    if (!value) {
      this.term = null;
    }
  }

  public long getFrequency() {
    return this.frequency;
  }

  public GlobalTermInfo setFrequency(long frequency) {
    this.frequency = frequency;
    setFrequencyIsSet(true);
    return this;
  }

  public void unsetFrequency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  public void setFrequencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
  }

  public double getIdf() {
    return this.idf;
  }

  public GlobalTermInfo setIdf(double idf) {
    this.idf = idf;
    setIdfIsSet(true);
    return this;
  }

  public void unsetIdf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDF_ISSET_ID);
  }

  /** Returns true if field idf is set (has been assigned a value) and false otherwise */
  public boolean isSetIdf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDF_ISSET_ID);
  }

  public void setIdfIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDF_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case TERM:
      if (value == null) {
        unsetTerm();
      } else {
        setTerm((java.lang.String)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((java.lang.Long)value);
      }
      break;

    case IDF:
      if (value == null) {
        unsetIdf();
      } else {
        setIdf((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TERM:
      return getTerm();

    case FREQUENCY:
      return getFrequency();

    case IDF:
      return getIdf();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TERM:
      return isSetTerm();
    case FREQUENCY:
      return isSetFrequency();
    case IDF:
      return isSetIdf();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GlobalTermInfo)
      return this.equals((GlobalTermInfo)that);
    return false;
  }

  public boolean equals(GlobalTermInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_term = true && this.isSetTerm();
    boolean that_present_term = true && that.isSetTerm();
    if (this_present_term || that_present_term) {
      if (!(this_present_term && that_present_term))
        return false;
      if (!this.term.equals(that.term))
        return false;
    }

    boolean this_present_frequency = true;
    boolean that_present_frequency = true;
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (this.frequency != that.frequency)
        return false;
    }

    boolean this_present_idf = true;
    boolean that_present_idf = true;
    if (this_present_idf || that_present_idf) {
      if (!(this_present_idf && that_present_idf))
        return false;
      if (this.idf != that.idf)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetTerm()) ? 131071 : 524287);
    if (isSetTerm())
      hashCode = hashCode * 8191 + term.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(frequency);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(idf);

    return hashCode;
  }

  @Override
  public int compareTo(GlobalTermInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdf()).compareTo(other.isSetIdf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idf, other.idf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GlobalTermInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("term:");
    if (this.term == null) {
      sb.append("null");
    } else {
      sb.append(this.term);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequency:");
    sb.append(this.frequency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idf:");
    sb.append(this.idf);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GlobalTermInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GlobalTermInfoStandardScheme getScheme() {
      return new GlobalTermInfoStandardScheme();
    }
  }

  private static class GlobalTermInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<GlobalTermInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GlobalTermInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.term = iprot.readString();
              struct.setTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.frequency = iprot.readI64();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IDF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.idf = iprot.readDouble();
              struct.setIdfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GlobalTermInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.term != null) {
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeString(struct.term);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
      oprot.writeI64(struct.frequency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDF_FIELD_DESC);
      oprot.writeDouble(struct.idf);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GlobalTermInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GlobalTermInfoTupleScheme getScheme() {
      return new GlobalTermInfoTupleScheme();
    }
  }

  private static class GlobalTermInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<GlobalTermInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GlobalTermInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTerm()) {
        optionals.set(1);
      }
      if (struct.isSetFrequency()) {
        optionals.set(2);
      }
      if (struct.isSetIdf()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTerm()) {
        oprot.writeString(struct.term);
      }
      if (struct.isSetFrequency()) {
        oprot.writeI64(struct.frequency);
      }
      if (struct.isSetIdf()) {
        oprot.writeDouble(struct.idf);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GlobalTermInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.term = iprot.readString();
        struct.setTermIsSet(true);
      }
      if (incoming.get(2)) {
        struct.frequency = iprot.readI64();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.idf = iprot.readDouble();
        struct.setIdfIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

