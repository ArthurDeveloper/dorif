/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.dorif.chord;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-03")
public class FingerTable implements org.apache.thrift.TBase<FingerTable, FingerTable._Fields>, java.io.Serializable, Cloneable, Comparable<FingerTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FingerTable");

  private static final org.apache.thrift.protocol.TField FINGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("fingers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESSOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("successorList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FingerTableStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FingerTableTupleSchemeFactory();

  public java.util.List<Finger> fingers; // required
  public java.util.List<Finger> successorList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FINGERS((short)1, "fingers"),
    SUCCESSOR_LIST((short)2, "successorList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FINGERS
          return FINGERS;
        case 2: // SUCCESSOR_LIST
          return SUCCESSOR_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FINGERS, new org.apache.thrift.meta_data.FieldMetaData("fingers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class))));
    tmpMap.put(_Fields.SUCCESSOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("successorList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FingerTable.class, metaDataMap);
  }

  public FingerTable() {
  }

  public FingerTable(
    java.util.List<Finger> fingers,
    java.util.List<Finger> successorList)
  {
    this();
    this.fingers = fingers;
    this.successorList = successorList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FingerTable(FingerTable other) {
    if (other.isSetFingers()) {
      java.util.List<Finger> __this__fingers = new java.util.ArrayList<Finger>(other.fingers.size());
      for (Finger other_element : other.fingers) {
        __this__fingers.add(new Finger(other_element));
      }
      this.fingers = __this__fingers;
    }
    if (other.isSetSuccessorList()) {
      java.util.List<Finger> __this__successorList = new java.util.ArrayList<Finger>(other.successorList.size());
      for (Finger other_element : other.successorList) {
        __this__successorList.add(new Finger(other_element));
      }
      this.successorList = __this__successorList;
    }
  }

  public FingerTable deepCopy() {
    return new FingerTable(this);
  }

  @Override
  public void clear() {
    this.fingers = null;
    this.successorList = null;
  }

  public int getFingersSize() {
    return (this.fingers == null) ? 0 : this.fingers.size();
  }

  public java.util.Iterator<Finger> getFingersIterator() {
    return (this.fingers == null) ? null : this.fingers.iterator();
  }

  public void addToFingers(Finger elem) {
    if (this.fingers == null) {
      this.fingers = new java.util.ArrayList<Finger>();
    }
    this.fingers.add(elem);
  }

  public java.util.List<Finger> getFingers() {
    return this.fingers;
  }

  public FingerTable setFingers(java.util.List<Finger> fingers) {
    this.fingers = fingers;
    return this;
  }

  public void unsetFingers() {
    this.fingers = null;
  }

  /** Returns true if field fingers is set (has been assigned a value) and false otherwise */
  public boolean isSetFingers() {
    return this.fingers != null;
  }

  public void setFingersIsSet(boolean value) {
    if (!value) {
      this.fingers = null;
    }
  }

  public int getSuccessorListSize() {
    return (this.successorList == null) ? 0 : this.successorList.size();
  }

  public java.util.Iterator<Finger> getSuccessorListIterator() {
    return (this.successorList == null) ? null : this.successorList.iterator();
  }

  public void addToSuccessorList(Finger elem) {
    if (this.successorList == null) {
      this.successorList = new java.util.ArrayList<Finger>();
    }
    this.successorList.add(elem);
  }

  public java.util.List<Finger> getSuccessorList() {
    return this.successorList;
  }

  public FingerTable setSuccessorList(java.util.List<Finger> successorList) {
    this.successorList = successorList;
    return this;
  }

  public void unsetSuccessorList() {
    this.successorList = null;
  }

  /** Returns true if field successorList is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessorList() {
    return this.successorList != null;
  }

  public void setSuccessorListIsSet(boolean value) {
    if (!value) {
      this.successorList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FINGERS:
      if (value == null) {
        unsetFingers();
      } else {
        setFingers((java.util.List<Finger>)value);
      }
      break;

    case SUCCESSOR_LIST:
      if (value == null) {
        unsetSuccessorList();
      } else {
        setSuccessorList((java.util.List<Finger>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FINGERS:
      return getFingers();

    case SUCCESSOR_LIST:
      return getSuccessorList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FINGERS:
      return isSetFingers();
    case SUCCESSOR_LIST:
      return isSetSuccessorList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FingerTable)
      return this.equals((FingerTable)that);
    return false;
  }

  public boolean equals(FingerTable that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fingers = true && this.isSetFingers();
    boolean that_present_fingers = true && that.isSetFingers();
    if (this_present_fingers || that_present_fingers) {
      if (!(this_present_fingers && that_present_fingers))
        return false;
      if (!this.fingers.equals(that.fingers))
        return false;
    }

    boolean this_present_successorList = true && this.isSetSuccessorList();
    boolean that_present_successorList = true && that.isSetSuccessorList();
    if (this_present_successorList || that_present_successorList) {
      if (!(this_present_successorList && that_present_successorList))
        return false;
      if (!this.successorList.equals(that.successorList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFingers()) ? 131071 : 524287);
    if (isSetFingers())
      hashCode = hashCode * 8191 + fingers.hashCode();

    hashCode = hashCode * 8191 + ((isSetSuccessorList()) ? 131071 : 524287);
    if (isSetSuccessorList())
      hashCode = hashCode * 8191 + successorList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FingerTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFingers()).compareTo(other.isSetFingers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFingers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingers, other.fingers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSuccessorList()).compareTo(other.isSetSuccessorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successorList, other.successorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FingerTable(");
    boolean first = true;

    sb.append("fingers:");
    if (this.fingers == null) {
      sb.append("null");
    } else {
      sb.append(this.fingers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successorList:");
    if (this.successorList == null) {
      sb.append("null");
    } else {
      sb.append(this.successorList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FingerTableStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FingerTableStandardScheme getScheme() {
      return new FingerTableStandardScheme();
    }
  }

  private static class FingerTableStandardScheme extends org.apache.thrift.scheme.StandardScheme<FingerTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FingerTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FINGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fingers = new java.util.ArrayList<Finger>(_list0.size);
                Finger _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Finger();
                  _elem1.read(iprot);
                  struct.fingers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFingersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESSOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.successorList = new java.util.ArrayList<Finger>(_list3.size);
                Finger _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Finger();
                  _elem4.read(iprot);
                  struct.successorList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSuccessorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FingerTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fingers != null) {
        oprot.writeFieldBegin(FINGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fingers.size()));
          for (Finger _iter6 : struct.fingers)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.successorList != null) {
        oprot.writeFieldBegin(SUCCESSOR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.successorList.size()));
          for (Finger _iter7 : struct.successorList)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FingerTableTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FingerTableTupleScheme getScheme() {
      return new FingerTableTupleScheme();
    }
  }

  private static class FingerTableTupleScheme extends org.apache.thrift.scheme.TupleScheme<FingerTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FingerTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFingers()) {
        optionals.set(0);
      }
      if (struct.isSetSuccessorList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFingers()) {
        {
          oprot.writeI32(struct.fingers.size());
          for (Finger _iter8 : struct.fingers)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetSuccessorList()) {
        {
          oprot.writeI32(struct.successorList.size());
          for (Finger _iter9 : struct.successorList)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FingerTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fingers = new java.util.ArrayList<Finger>(_list10.size);
          Finger _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new Finger();
            _elem11.read(iprot);
            struct.fingers.add(_elem11);
          }
        }
        struct.setFingersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.successorList = new java.util.ArrayList<Finger>(_list13.size);
          Finger _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Finger();
            _elem14.read(iprot);
            struct.successorList.add(_elem14);
          }
        }
        struct.setSuccessorListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

