#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from DORIF import DORIFService
from DORIF.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i8 ping()')
    print('   query(string query)')
    print('   queryServer(string query)')
    print('  string getDocument(i64 id)')
    print('  void addTermo(string text)')
    print('  Term getTermo(string text)')
    print('  bool containsTermo(string text)')
    print('  i64 getServerNumDocs()')
    print('  i64 getTotalNumDocs()')
    print('  void startCollecting()')
    print('  void stopCollecting()')
    print('   getServerGlobalTerms()')
    print('   getTotalGlobalTerms()')
    print('   getServerGlobalTermsInfo()')
    print('   getServerDocTermsInfo()')
    print('   getTotalGlobalTermsInfo()')
    print('   getTotalDocTermsInfo()')
    print('   getServerDocInfos()')
    print('   getTotalDocInfo()')
    print('  void join(Node n)')
    print('  Node findSuccessor(i64 id)')
    print('  Node findPredecessor(i64 id)')
    print('  Node closestPrecedingFinger(i64 id)')
    print('  void transferKeys(Node n)')
    print('  void stabilize()')
    print('  void notify(Node n)')
    print('  void fixFingers()')
    print('  Node sendSelf()')
    print('  void setPredecessor(Node l)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DORIFService.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'query':
    if len(args) != 1:
        print('query requires 1 args')
        sys.exit(1)
    pp.pprint(client.query(args[0],))

elif cmd == 'queryServer':
    if len(args) != 1:
        print('queryServer requires 1 args')
        sys.exit(1)
    pp.pprint(client.queryServer(args[0],))

elif cmd == 'getDocument':
    if len(args) != 1:
        print('getDocument requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDocument(eval(args[0]),))

elif cmd == 'addTermo':
    if len(args) != 1:
        print('addTermo requires 1 args')
        sys.exit(1)
    pp.pprint(client.addTermo(args[0],))

elif cmd == 'getTermo':
    if len(args) != 1:
        print('getTermo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTermo(args[0],))

elif cmd == 'containsTermo':
    if len(args) != 1:
        print('containsTermo requires 1 args')
        sys.exit(1)
    pp.pprint(client.containsTermo(args[0],))

elif cmd == 'getServerNumDocs':
    if len(args) != 0:
        print('getServerNumDocs requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerNumDocs())

elif cmd == 'getTotalNumDocs':
    if len(args) != 0:
        print('getTotalNumDocs requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTotalNumDocs())

elif cmd == 'startCollecting':
    if len(args) != 0:
        print('startCollecting requires 0 args')
        sys.exit(1)
    pp.pprint(client.startCollecting())

elif cmd == 'stopCollecting':
    if len(args) != 0:
        print('stopCollecting requires 0 args')
        sys.exit(1)
    pp.pprint(client.stopCollecting())

elif cmd == 'getServerGlobalTerms':
    if len(args) != 0:
        print('getServerGlobalTerms requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerGlobalTerms())

elif cmd == 'getTotalGlobalTerms':
    if len(args) != 0:
        print('getTotalGlobalTerms requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTotalGlobalTerms())

elif cmd == 'getServerGlobalTermsInfo':
    if len(args) != 0:
        print('getServerGlobalTermsInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerGlobalTermsInfo())

elif cmd == 'getServerDocTermsInfo':
    if len(args) != 0:
        print('getServerDocTermsInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerDocTermsInfo())

elif cmd == 'getTotalGlobalTermsInfo':
    if len(args) != 0:
        print('getTotalGlobalTermsInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTotalGlobalTermsInfo())

elif cmd == 'getTotalDocTermsInfo':
    if len(args) != 0:
        print('getTotalDocTermsInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTotalDocTermsInfo())

elif cmd == 'getServerDocInfos':
    if len(args) != 0:
        print('getServerDocInfos requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerDocInfos())

elif cmd == 'getTotalDocInfo':
    if len(args) != 0:
        print('getTotalDocInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getTotalDocInfo())

elif cmd == 'join':
    if len(args) != 1:
        print('join requires 1 args')
        sys.exit(1)
    pp.pprint(client.join(eval(args[0]),))

elif cmd == 'findSuccessor':
    if len(args) != 1:
        print('findSuccessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findSuccessor(eval(args[0]),))

elif cmd == 'findPredecessor':
    if len(args) != 1:
        print('findPredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findPredecessor(eval(args[0]),))

elif cmd == 'closestPrecedingFinger':
    if len(args) != 1:
        print('closestPrecedingFinger requires 1 args')
        sys.exit(1)
    pp.pprint(client.closestPrecedingFinger(eval(args[0]),))

elif cmd == 'transferKeys':
    if len(args) != 1:
        print('transferKeys requires 1 args')
        sys.exit(1)
    pp.pprint(client.transferKeys(eval(args[0]),))

elif cmd == 'stabilize':
    if len(args) != 0:
        print('stabilize requires 0 args')
        sys.exit(1)
    pp.pprint(client.stabilize())

elif cmd == 'notify':
    if len(args) != 1:
        print('notify requires 1 args')
        sys.exit(1)
    pp.pprint(client.notify(eval(args[0]),))

elif cmd == 'fixFingers':
    if len(args) != 0:
        print('fixFingers requires 0 args')
        sys.exit(1)
    pp.pprint(client.fixFingers())

elif cmd == 'sendSelf':
    if len(args) != 0:
        print('sendSelf requires 0 args')
        sys.exit(1)
    pp.pprint(client.sendSelf())

elif cmd == 'setPredecessor':
    if len(args) != 1:
        print('setPredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.setPredecessor(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
